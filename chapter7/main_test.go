package main

import (
	"encoding/json"
	"os"
)

func Example_mainA() {
	graph := [][3]int{
		{0, 5},
		{0, 1, 3},
		{0, 3, 5},
		{1, 2, 2},
		{1, 3, 1},
		{1, 4, 4},
		{2, 5, 4},
		{3, 6, 2},
		{3, 7, 3},
		{4, 5, 1},
		{5, 7, 2},
		{5, 8, 5},
		{6, 7, 2},
		{7, 8, 4},
	}
	r, w, _ := os.Pipe()
	s, _ := json.Marshal(graph)
	w.Write(s)
	w.Close()
	os.Stdin = r
	main()
	// Output:
	// 0
	// [0 3 99 5 99 99 99 99 99]
	// [1 0 0 0 0 0 0 0 0]
	// [-1 0 0 0 0 0 0 0 0]
	// 1
	// [0 3 5 4 7 99 99 99 99]
	// [1 1 0 0 0 0 0 0 0]
	// [-1 0 1 1 1 0 0 0 0]
	// 3
	// [0 3 5 4 7 99 6 7 99]
	// [1 1 0 1 0 0 0 0 0]
	// [-1 0 1 1 1 0 3 3 0]
	// 2
	// [0 3 5 4 7 9 6 7 99]
	// [1 1 1 1 0 0 0 0 0]
	// [-1 0 1 1 1 2 3 3 0]
	// 6
	// [0 3 5 4 7 9 6 7 99]
	// [1 1 1 1 0 0 1 0 0]
	// [-1 0 1 1 1 2 3 3 0]
	// 4
	// [0 3 5 4 7 8 6 7 99]
	// [1 1 1 1 1 0 1 0 0]
	// [-1 0 1 1 1 4 3 3 0]
	// 7
	// [0 3 5 4 7 8 6 7 11]
	// [1 1 1 1 1 0 1 1 0]
	// [-1 0 1 1 1 4 3 3 7]
	// 5
	// [0 3 5 4 7 8 6 7 11]
	// [1 1 1 1 1 1 1 1 0]
	// [-1 0 1 1 1 4 3 3 7]
	// 0 -> 5 : Distance = 8, Path = 5 4 1 0
}
func Example_mainB() {
	graph := [][3]int{
		{0, 8},
		{0, 1, 4},
		{0, 3, 1},
		{1, 2, 1},
		{1, 4, 1},
		{2, 5, 1},
		{3, 4, 1},
		{3, 6, 1},
		{4, 5, 2},
		{4, 7, 1},
		{5, 8, 2},
		{6, 7, 1},
		{7, 8, 5},
	}
	r, w, _ := os.Pipe()
	s, _ := json.Marshal(graph)
	w.Write(s)
	w.Close()
	os.Stdin = r
	main()
	// Output:
	// 0
	// [0 4 99 1 99 99 99 99 99]
	// [1 0 0 0 0 0 0 0 0]
	// [-1 0 0 0 0 0 0 0 0]
	// 3
	// [0 4 99 1 2 99 2 99 99]
	// [1 0 0 1 0 0 0 0 0]
	// [-1 0 0 0 3 0 3 0 0]
	// 4
	// [0 3 99 1 2 4 2 3 99]
	// [1 0 0 1 1 0 0 0 0]
	// [-1 4 0 0 3 4 3 4 0]
	// 6
	// [0 3 99 1 2 4 2 3 99]
	// [1 0 0 1 1 0 1 0 0]
	// [-1 4 0 0 3 4 3 4 0]
	// 1
	// [0 3 4 1 2 4 2 3 99]
	// [1 1 0 1 1 0 1 0 0]
	// [-1 4 1 0 3 4 3 4 0]
	// 7
	// [0 3 4 1 2 4 2 3 8]
	// [1 1 0 1 1 0 1 1 0]
	// [-1 4 1 0 3 4 3 4 7]
	// 2
	// [0 3 4 1 2 4 2 3 8]
	// [1 1 1 1 1 0 1 1 0]
	// [-1 4 1 0 3 4 3 4 7]
	// 5
	// [0 3 4 1 2 4 2 3 6]
	// [1 1 1 1 1 1 1 1 0]
	// [-1 4 1 0 3 4 3 4 5]
	// 8
	// [0 3 4 1 2 4 2 3 6]
	// [1 1 1 1 1 1 1 1 1]
	// [-1 4 1 0 3 4 3 4 5]
	// 0 -> 8 : Distance = 6, Path = 8 5 4 3 0
}
